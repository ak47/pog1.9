= Password Operations Gem Security Notes

== Random String Generator

The RandomStringGenerator class relies on the Kernel.rand method explicitly.  This
means that the Strings generated by the RandomStringGenerator are not very 
secure.  At the time of this writing, the Kernel.rand method in Ruby 1.8.6 uses the 
Mersenne Twister algorithm, which, according to Wikipedia, is predictable after 
approximately 620 iterations and precisely predictable from the start if the seed is 
known.

To add additional security, passwords are shuffled to prevent exploitation algorithms 
from seeing exactly what order the characters were generated in.  This should make reversing
the passwords to determine the seed significantly more difficult.

In my opinion, this is only secure enough for uses on the level of temporary 
passwords, and should only generate a few passwords per instance of the generator.
I'm looking to create this more secure in future versions.


== String/Password Sanitization

POG includes an addition to the String class to sanitize String contents.  The +sanitize+ 
method is designed to sanitize (i.e. destructively clear) the contents of the String.
This method is dependent upon the String#[Fixnum]= method doing the replacements without
duplicating anything.  The MRI does this properly; however, this may not be the case for
other Ruby implementations.


== References

Wikipedia.  "Merseene Twister".
  http://en.wikipedia.org/wiki/Mersenne_Twister
  
Ruby RDocs.  "Kernel.rand()".
  http://ruby-doc.org/core-1.8.6/classes/Kernel.html#M005977
